# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- develop
pr:
  autoCancel: true
  branches:
    include:
    - master

pool:
  vmImage: 'windows-2019'

name: $(BuildID)

steps:
- task: PowerShell@2
  displayName: 'Configure Environment'
  inputs:
    targetType: 'inline'
    script: |
      $c = @"
      {
          "BearerToken": "$(BearerToken)",
          "Region": "$(AzureRegion)",
          "TenantId": "$(TenantId)",
          "ApplicationId": "$(ApplicationId)",
          "Secret": "$(Secret)",
          "DatabricksOrgId": "$(DatabricksOrgId)",
          "ResourceGroupName": "$(ResourceGroup)",
          "SubscriptionId": "$(SubscriptionId)",
          "WorkspaceName": "$(Workspace)",
          "ClusterId": "$(ClusterId)",
          "Username": "$(TestUser)"
      }
      "@
      Set-Content .\config.json $c
      Remove-Item .\TestResults.xml -Force -ErrorAction SilentlyContinue
    pwsh: true
    workingDirectory: 'Tests'

- task: PowerShell@2
  displayName: 'Windows Powershell - Bearer'
  inputs:
    targetType: 'inline'
    script: |
      $Mode="Bearer"
      Install-Module Pester -MinimumVersion 4.4.2 -Scope CurrentUser -SkipPublisherCheck -Force
      Import-Module Pester -MinimumVersion 4.4.2 
      Set-Location "./Tests"
      $Edition = $PSVersionTable.PSEdition
      Invoke-Pester -Script @{Path = "./*.tests.ps1"; Parameters = @{mode=$Mode}} -OutputFile "TestResults-$Edition-$Mode.xml" -OutputFormat NUnitXML
    pwsh: false

- task: PowerShell@2
  displayName: 'Powershell Core - ServicePrincipal'
  inputs:
    targetType: 'inline'
    script: |
      $Mode="ServicePrincipal"
      Install-Module Pester -MinimumVersion 4.4.2 -Scope CurrentUser -SkipPublisherCheck -Force
      Import-Module Pester -MinimumVersion 4.4.2 
      Set-Location "./Tests"
      $Edition = $PSVersionTable.PSEdition
      Invoke-Pester -Script @{Path = "./*.tests.ps1"; Parameters = @{mode=$Mode}} -OutputFile "TestResults-$Edition-$Mode.xml" -OutputFormat NUnitXML
    pwsh: true

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TestResults-*Bearer.xml'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: '**/TestResults-*Bearer.xml'
    testRunTitle: Windows PowerShell - Bearer
    publishRunAttachments: false

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TestResults-*ServicePrincipal.xml'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: '**/TestResults-*ServicePrincipal.xml'
    testRunTitle: Windows PowerShell Core - ServicePrincipal
    publishRunAttachments: false

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: |
     Private\**
     Public\**
     *.psd1
     *.psm1
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: azure.databricks.cicd.Tools'
  inputs:
    ArtifactName: azure.databricks.cicd.Tools